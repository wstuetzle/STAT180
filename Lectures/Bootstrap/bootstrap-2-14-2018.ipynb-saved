{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# <span style=\"color:red\"> The Bootstrap</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Import modules \n",
    "\n",
    "import numpy as np\n",
    "from datascience import *\n",
    "# from datascience_extensions import *\n",
    "import seaborn as sns\n",
    "sns.set_style(\"whitegrid\")\n",
    "%matplotlib inline\n",
    "import os.path"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A summary of the methods for Table is [here](http://data8.org/datascience/tables.html) <br>\n",
    "A tutorial for the datascience module is [here](http://data8.org/datascience/tutorial.html) <br>\n",
    "A cheatsheet for the datascience module is [here](https://github.com/wstuetzle/STAT180/blob/master/Computing/data8_sp17_midterm_ref_sheet.pdf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### <span style=\"color:red\"> [Bootstrap notes](/users/wxs/Dropbox/IDS/Gitreps/STAT180/Lectures/Bootstrap/bootstrap-notes-2-14-1018.pdf)</span>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  [Bootstrap notes](bootstrap-notes-2-14-1018.pdf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### <span style=\"color:blue\"> Bootstrap examples </span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "delay_tab = Table.read_table(\"https://github.com/wstuetzle/STAT180/raw/master/\\\n",
    "Lectures/Sampling/united.csv\")\n",
    "N = delay_tab.num_rows\n",
    "\n",
    "Population = delay_tab.where(\"Delay\", are.below(100)).select(\"Delay\")\n",
    "N = Population.num_rows\n",
    "\n",
    "def bootstrap_ci(sample, statistic, num_boot):\n",
    "    resample_values = np.zeros(num_boot)\n",
    "    for i in np.arange(num_boot):\n",
    "        resample = sample.sample(sample.num_rows, with_replacement = True)\n",
    "        resample_values[i] = statistic(resample)\n",
    "    resample_std = np.std(resample_values)\n",
    "    estimate = statistic(sample)\n",
    "    normal_theory_interval = [estimate - 2 * resample_std,\n",
    "                              estimate + 2 * resample_std]\n",
    "    percentile_interval = [np.percentile(resample_values, 2.5),\n",
    "                           np.percentile(resample_values, 97.5)]\n",
    "    return([normal_theory_interval, percentile_interval])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# First a few experiments with std\n",
    "\n",
    "def statistic(table):\n",
    "    return(np.std(table.column(\"Delay\")))\n",
    "\n",
    "sample_size = 32\n",
    "num_boot = 400\n",
    "\n",
    "sample = Population.sample(sample_size, with_replacement = True)\n",
    "confidence_intervals = bootstrap_ci(sample, statistic, num_boot)\n",
    "print(\"Population parameter = \", str(statistic(Population)))\n",
    "print(\"Estimate = \", str(statistic(sample)))\n",
    "confidence_intervals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Next, let's try median\n",
    "\n",
    "def statistic(table):\n",
    "    return(np.median(table.column(\"Delay\")))\n",
    "\n",
    "sample_size = 16\n",
    "num_boot = 400\n",
    "\n",
    "sample = Population.sample(sample_size, with_replacement = True)\n",
    "confidence_intervals = bootstrap_ci(sample, statistic, num_boot)\n",
    "print(\"Population parameter = \", str(statistic(Population)))\n",
    "print(\"Estimate = \", str(statistic(sample)))\n",
    "confidence_intervals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Now the mean. \n",
    "\n",
    "# Note: We do not need the Bootstrap to find \"normal theory\" confidence \n",
    "# intervals for the mean. We would in essence be finding the standard \n",
    "# error by computer simulation.\n",
    "\n",
    "def statistic(table):\n",
    "    return(np.mean(table.column(\"Delay\")))\n",
    "\n",
    "sample_size = 16\n",
    "num_boot = 400\n",
    "\n",
    "sample = Population.sample(sample_size, with_replacement = True)\n",
    "confidence_intervals = bootstrap_ci(sample, statistic, num_boot)\n",
    "print(\"Population parameter = \", str(statistic(Population)))\n",
    "print(\"Estimate = \", str(statistic(sample)))\n",
    "confidence_intervals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
